/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mynote;

import java.io.*;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.JOptionPane;
import java.awt.print.PrinterException;

import com.sun.speech.freetts.*;

import edu.cmu.sphinx.frontend.util.Microphone;
import edu.cmu.sphinx.recognizer.Recognizer;
import edu.cmu.sphinx.result.Result;
import edu.cmu.sphinx.util.props.ConfigurationManager;

/**
 *
 * @author sharif salah
 */
public class MyNoteFrame extends javax.swing.JFrame {

    ConfigurationManager cm;
    
    
    /**
     * Creates new form NewJFrame
     */
    public MyNoteFrame() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        SpeakButton = new javax.swing.JButton();
        recButton = new javax.swing.JButton();
        ScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        Separator = new javax.swing.JPopupMenu.Separator();
        saveMenu = new javax.swing.JMenuItem();
        printMenu = new javax.swing.JMenuItem();
        Separator1 = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        checkBoxMenu = new javax.swing.JCheckBoxMenuItem();
        viewMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("My Note");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toolBar.setRollover(true);

        SpeakButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Play-25.png"))); // NOI18N
        SpeakButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpeakButtonActionPerformed(evt);
            }
        });
        toolBar.add(SpeakButton);

        recButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Record-25.png"))); // NOI18N
        recButton.setFocusable(false);
        recButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        recButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recButtonActionPerformed(evt);
            }
        });
        toolBar.add(recButton);

        textArea.setColumns(20);
        textArea.setRows(5);
        ScrollPane.setViewportView(textArea);

        fileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Create New.png"))); // NOI18N
        newMenu.setText("New               ");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        fileMenu.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mynote/play-15.png"))); // NOI18N
        openMenu.setText("Open                                  ");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);
        fileMenu.add(Separator);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Save.png"))); // NOI18N
        saveMenu.setText("Save ");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);

        printMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Print-15.png"))); // NOI18N
        printMenu.setText("Print...");
        printMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuActionPerformed(evt);
            }
        });
        fileMenu.add(printMenu);
        fileMenu.add(Separator1);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        checkBoxMenu.setSelected(true);
        checkBoxMenu.setText("Tool Bar");
        checkBoxMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuActionPerformed(evt);
            }
        });
        editMenu.add(checkBoxMenu);

        menuBar.add(editMenu);

        viewMenu.setText("View");

        helpMenu.setText("Help");
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });
        viewMenu.add(helpMenu);

        aboutMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/About.png"))); // NOI18N
        aboutMenu.setText("About MyNote");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });
        viewMenu.add(aboutMenu);

        menuBar.add(viewMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
            .addComponent(ScrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
      // to check the text area if empty 
      if (!"".equals(textArea.getText())){
          //check the user if want ot save if the field is not empty
          int confirm = JOptionPane.showConfirmDialog(this, "Do You Want To Save ?");
          if(confirm == JOptionPane.YES_OPTION){
              JFileChooser chooser = new JFileChooser();
              int chooserValue = chooser.showSaveDialog(this);
              if (chooserValue == JFileChooser.APPROVE_OPTION){
                  try {
                      try (PrintWriter fout = new PrintWriter(chooser.getSelectedFile())){
                          fout.print(textArea.getText());
                      }
                  }catch (FileNotFoundException ex) {
                      Logger.getLogger(MyNoteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                  }
                  JOptionPane.showMessageDialog(null, "File Saved .. New File Will Open !!! ","Information",JOptionPane.INFORMATION_MESSAGE);
                  textArea.setText("");// To retern text field to null
              }
          }else {
              textArea.setText("");
              // To give the user massage that has been open a new empty text field
              JOptionPane.showMessageDialog(null, "New File !!! ", "Information" , JOptionPane.INFORMATION_MESSAGE);
          }
      }else {
          textArea.setText("");
          JOptionPane.showMessageDialog(null, "New File !!!", "Information" , JOptionPane.INFORMATION_MESSAGE);
      }
    }//GEN-LAST:event_newMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        // to check the text area if empty 
        if (!"".equals(textArea.getText())){
            int confirm = JOptionPane.showConfirmDialog(this, "Do You Want To Save ?");
            if(confirm == JOptionPane.YES_OPTION){
                JFileChooser chooser = new JFileChooser();
                int chooserValue = chooser.showSaveDialog(this);
                if (chooserValue == JFileChooser.APPROVE_OPTION){
                    try {
                        try (PrintWriter fout = new PrintWriter(chooser.getSelectedFile())) {
                            fout.print(textArea.getText());
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MyNoteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(null, "Saved !!!","Information",JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                }
            } else {
                System.exit(0);//to exit the frame
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed

        JFileChooser chooser = new JFileChooser();
        int chooserValue = chooser.showSaveDialog(this);
        if (chooserValue == JFileChooser.APPROVE_OPTION){
            try {
                try (PrintWriter fout = new PrintWriter(chooser.getSelectedFile())) {
                    fout.print(textArea.getText());
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MyNoteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "Saved !!!","Information",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
       // To check if the field is empty
       if ("".equals(textArea.getText())){
           JFileChooser chooser = new JFileChooser();
           int chooserValue = chooser.showOpenDialog(this);
           if (chooserValue == JFileChooser.APPROVE_OPTION){
               try{
                   try (Scanner fin = new Scanner (chooser.getSelectedFile())) {
                       String buffer = "";
                       while(fin.hasNext()){
                           buffer+= fin.nextLine() + "\n";
                       }
                       textArea.setText(buffer);
                   }
               }catch (FileNotFoundException ex){
                   JOptionPane.showMessageDialog(this, "File Not Found !!!");
               }
               JOptionPane.showMessageDialog(null, "File Opened !!!","Information",JOptionPane.INFORMATION_MESSAGE);
           }
       } else {
           int confirm = JOptionPane.showConfirmDialog(this, "Do You Want To Save ?");
           if(confirm == JOptionPane.YES_OPTION){
               JFileChooser chooser = new JFileChooser();
               int chooserValue = chooser.showSaveDialog(this);
               if (chooserValue == JFileChooser.APPROVE_OPTION){
                   try {
                       try (PrintWriter fout = new PrintWriter(chooser.getSelectedFile())) {
                           fout.print(textArea.getText());
                       }
                   } catch (FileNotFoundException ex) {
                       Logger.getLogger(MyNoteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                   }
                   JOptionPane.showMessageDialog(null, "Saved !!!","Information",JOptionPane.INFORMATION_MESSAGE);
               }
           }
           JFileChooser chooser = new JFileChooser();
           int chooserValue = chooser.showOpenDialog(this);
           if (chooserValue == JFileChooser.APPROVE_OPTION){
               try{
                   try (Scanner fin = new Scanner (chooser.getSelectedFile())) {
                       String buffer = "";
                       while(fin.hasNext()){
                           buffer+=fin.nextLine() + "\n";
                       }
                       textArea.setText(buffer);
                   }
               }catch (FileNotFoundException ex){
                   JOptionPane.showMessageDialog(this, "File Not Found !!!");
               }
               JOptionPane.showMessageDialog(null, "File Opened !!!","Information",JOptionPane.INFORMATION_MESSAGE);
           }
       }
    }//GEN-LAST:event_openMenuActionPerformed
    private static final String VOICENAME ="kevin16";// to use kevin 16 voice
    private void SpeakButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpeakButtonActionPerformed
        
        Voice voice;
        VoiceManager vm = VoiceManager.getInstance();
        voice = vm.getVoice(VOICENAME);// to get kevin 16 voice 
        voice.allocate();
        try{
            voice.speak(textArea.getText());// to read the text from text fiald 
        }catch(Exception ex){
        }     
    }//GEN-LAST:event_SpeakButtonActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
        JOptionPane.showMessageDialog(null, "MyNote" + "\n"
            + "The Copyright© of this software belongs to sharif under the terms of Copyright Act 1987 as qualified " + "\n" + "by Regulation 4(1) of the Limkokwing University of Creative Technology Intellectual Property Regulations. "+"\n"+"This software is a final year project."+"\n"+"All rights reserved.","About MYNote",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void printMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMenuActionPerformed
       // to print 
        try{
            boolean pri = textArea.print();
            if (pri) {
                JOptionPane.showMessageDialog(null, "Done Printing", "Information" , JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Printing Closed","Printer",JOptionPane.ERROR_MESSAGE);
            }
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(null, "Printing Canceled","Printer",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_printMenuActionPerformed

    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
        JOptionPane.showMessageDialog(null, "MyNote" 
                +"\n"+"MAIN FILE LIST :"
                +"\n"+"New : Create a new text document."
                +"\n"+"Open : Opens an existing text document."
                +"\n"+"Save : Allows user to save the document as a different file,"
                +"\n"+"user will be able to choose the new filename and location for saving document."
                +"\n"+"Print : Allows user to print the document file."
                +"\n"+"Exit : Exit MyNote."
                +"\n"+"MAIN EDIT LIST :"
                +"\n"+"Color Editor :"
                +"\n"+"MAIN PLAY BUTTON"
                +"\n"+"Speak or read the contents of the text area."
                +"\n"+"MAIN RECORD BUTTON"
                +"\n"+"Recording what the user say and display it in the text filed.","Help",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpMenuActionPerformed

    private void checkBoxMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuActionPerformed
        //to enable toolbar in the editer fram that includ paly and record button
        if (checkBoxMenu.isSelected()){
         toolBar.setVisible(true);
        }else {
         toolBar.setVisible(false);
        }
    }//GEN-LAST:event_checkBoxMenuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // to check the text area if empty 
        if (!"".equals(textArea.getText())){
            int confirm = JOptionPane.showConfirmDialog(this, "Do You Want To Save ?");
            if(confirm == JOptionPane.YES_OPTION){
                JFileChooser chooser = new JFileChooser();
                int chooserValue = chooser.showSaveDialog(this);
                if (chooserValue == JFileChooser.APPROVE_OPTION){
                    try {
                        try (PrintWriter fout = new PrintWriter(chooser.getSelectedFile())) {
                            fout.print(textArea.getText());
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MyNoteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(null, "Saved !!!","Information",JOptionPane.INFORMATION_MESSAGE);   
                    System.exit(0);
                }
            } else {
                System.exit(0);//to exit the fram
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void recButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recButtonActionPerformed
            JOptionPane.showMessageDialog(null, " Say:(close recording) to close recording !!!","Information",JOptionPane.INFORMATION_MESSAGE); 
            cm = new ConfigurationManager();
            cm = new ConfigurationManager(MyNoteFrame.class.getResource("voicespeech.xml"));
            System.out.println("Loading...");// this line only to check the rcognition working
            Recognizer recognizer = (Recognizer) cm.lookup("recognizer");
            Microphone microphone = (Microphone) cm.lookup("microphone");
            /* allocate the resource necessary for the recognizer */
            recognizer.allocate();            
            /* the microphone will keep recording until the program exits */
            if (microphone.startRecording()) {
                System.out.println("Say: (coffee | tea | milk |water) " + 
                        "( welcome | hello )" + 
                        "( bat | dog | cat )"+ 
                        "( a | an | is )");// this line only to check the rcognition working
                textArea.update(textArea.getGraphics());
                while (true) {
                    /*
                    * This method will return when the end of speech
                    * is reached. Note that the endpointer will determine
                    * the end of speech.
                    */
                    Result result = recognizer.recognize();
                    if (result != null) {
                        String resultText = result.getBestFinalResultNoFiller();
                        System.out.println("You said: " + resultText );// this line only to check the rcognition working
                        if(resultText.equals("close recording")){
                            break;
                        } else {
                            textArea.append(" "+resultText+" ");
                            textArea.update(textArea.getGraphics());
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Cannot start microphone. !!!","Information",JOptionPane.INFORMATION_MESSAGE);
                recognizer.deallocate();
                System.exit(1);
            }
    }//GEN-LAST:event_recButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JPopupMenu.Separator Separator;
    private javax.swing.JPopupMenu.Separator Separator1;
    private javax.swing.JButton SpeakButton;
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JCheckBoxMenuItem checkBoxMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem printMenu;
    private javax.swing.JButton recButton;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JTextArea textArea;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
